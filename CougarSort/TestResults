           			10k_1				10k_4				10k_8			50k_1			50k_4			50k_8			100k_1				100k_4			100k_8		
ElenaSort			4,4,4 @100			5,5,5 @100			10,10,10 @10	18,18,18 @100 	27,27,27 @100	55,58,55 @10	39,38,38 @100		63,63,64 @100	114,114,114 @10
@home
ElenaSort			5,5,5 @100			6,6,7 @100			10,14,10 @10	19,19,19 @100	27,27,27 @100	58,64,61 @10	37,37,38 @100		64,63,64 @100	123,123,120 @10
@multivac
3Timsorts 			6,6,5 @100			7,7,7 @100			20,21,20 @10	24,24,24 @100	37,37,37 @100	52,62,56 @10	56,55,56 @100		88,89,89 @100	115,113,114 @10
@multivac
1Timsort			5,5,5 @100			5,4,4 @100			12,12,6 @10		18,17,17 @100	20,20,20 @100	45,42,40 @10	38,38,38 @100		49,51,50 @100	76,66,64 @10
@multivac
1Quicksort			4,4,4 @100			3,3,3 @100			5,7,5 @10		53,53,53 @100	15,15,16 @100	22,20,21 @10	216,217,211 @100	43,42,42 @100	45,45,45 @10
@multivac
LNGTH & LOOP UPDT all @10
3Timsorts			8.1, 9.6, 9.6		12, 12, 19			14, 15, 20		34, 41, 40		46, 46, 45		49, 53, 51		65, 63, 62			96, 101, 96		103, 116, 113
@multivac
1Timsort			4.5, 4.9, 5.3		5.9, 4.9, 9.6		6.7, 6.1, 5.6	31, 37, 34		37, 38, 36		40, 47, 40		51, 54, 48			73, 70, 65		76, 70, 75
@multivac
1Quicksort			5.5, 7.3, 5.8		4.7, 4.6, 5.3		5.1, 5.1, 5.5	58, 57, 57		19, 19, 19		21, 19, 19		220, 219, 216		41, 40, 41		41, 41, 40		
@multivac
Quick,then2Tims		9.4, 9.3, 14.1		12, 11, 9.7			12, 10, 11		71, 80, 71		52, 48, 54		52, 51, 50		236, 236, 249		92, 100, 95		95, 96, 98
@multivac
QuickThenTimOnRest	11.5, 12.2, 11.2	8.5, 14, 8.6		11, 15, 9		70, 70, 77		54, 45, 47		48, 50, 49		242, 238, 236		95, 87, 91		99, 115, 95
@multivac
1Timsort			6.2, 5.6, 4.7		7.7, 6.9, 6.2		6.7, 7.7, 6.7	31, 32, 31		37, 34, 36		39, 37, 37		59, 50, 50			64, 65, 60		68, 70, 62
@home
1Quicksort			5.3, 5.4, 5.5		4.1, 3.9, 4.1		4.6, 5.7, 4.5	58, 57, 56		18, 17, 17		18, 18, 21		222, 212, 218		38, 38, 40		39, 38, 38 
@home
1Mergesort			5.3, 7.8, 6.9		5.6, 6.2, 7.6		6.0, 6.2, 7.1	19, 20, 21		26, 20, 22		24, 23, 23		41, 40, 40			49, 47, 47		54, 52, 52
@multivac			
1Merge-insert1												7.9, 9.0, 6.8
1Merge-insert4												8.4, 6.4, 7.2
1Merge-insert7		8.0, 5.9, 7.6		6.7, 6.4, 6.6		7.0, 7.1, 6.7
1Merge-insert12												7.5, 6.1, 5.6
1Merge-insert20												6.7, 7.4, 6.1
1Merge-insert100											8.0, 7.8, 8.9
all @multivac




JUST ALPHASORT
justQuickAlpha		4,5,5 @100			3,3,3 @100			3,3,3 @100		56,57,56 @100	21,21,22 @100	25,26,26 @100	210,212,210 @100	55,56,55 @100	63,63,65 @100
@multivac
justTimAlpha






JUST LENGTHSORT

justQuickLength		45,45,45 @100		12,12,12 @100		11,10,10 @10	1356,1354 @10	439,436 @10		204,210 @10		stackOverflow		1950,1904 @10	1052,1100 @10
@multivac
justTimLength		2,2,2 @100			4,3,3 @100			3,3,4 @100		7,7,8 @100		9,9,11	@100	12,15,13 @100	14,14,16 @100		21,23,21 @100	29,30,30 @100
@multivac



TESTING COMPARITORS/SWAPPING
Alphabetical		33,34,34 @100		34,34,34 @100		34,34,34 @100	875,878 @10		877,875 @10		882,877 @10		3507,3558 @3		3585,3526 @3	3499,3533 @3
@multivac
SumOfOnes			28,28,28 @100		28,28,28 @100		29,30,28 @100	772,782 @10		787,779 @10		784,781 @10		3156,3118 @3		3158,3150 @3	3109,3111 @3
@multivac
Length				81,82,81 @100		102,101 @100		105,104	@100	2129,2130 @10	2143,2150 @1	3547,3502 @1	10120,10272 @1		18498,18338 @1	20794,20503 @1
@multivac
Length-optimized	28,28,28 @100		28,28,28 @100		28,28,28 @100	774,775 @10		776,782 @10		778,782 @10		3102,3112 @3		3115,3132 @3	3127,3147 @3
@multivac
Everything			81,80,81 @100		98, 98 @100			106,103 @100	2087,2092 @10	2656,2691 @1	3283,3291 @1	10012,10334 @1		18565,18514 @1	20589,20279 @1
@multivac
Evrythg,lngth-opt	28,28,28 @100		28,28,28 @100		28,28,28 @100	781,778 @10		779,777 @10		778,785 @10		3103,3100 @3		3107,3151 @3	3101,3105 @3
@multivac
swap everything		53,54,53 @100											1332,1334 @10									5405,5379 @3
@home
make array(only10k)	15,14,14 @100		
@home


so.... 1 length-optimized compare takes 28 milliseconds/50million operations = .5 nanoseconds
so.... 1 swap takes 53 milliseconds/50million operations = 1 nanosecond
so.... 4 array accesses per swap means 1 array access = .25 nanoseconds
so.... 1 array creation takes 14 milliseconds / 10k times = 1.4 microseconds = 1400 nanoseconds

JUST COPYING DATA (all @100)
outer++ & inner++	.31, .31, .31		.37, .39, .38		.58, .57, .59	1.18,1.15,1.14	1.67,1.58,1.61	2.88,2.88,3.02	2.52,2.49,2.57		3.74,3.54,3.59	6.15,6.13,6.22
@multivac
outer++ & inner--	.33, .31, .31		.40, .40, .40		.63, .60, .59	1.15,1.13,1.17	1.54,1.64,1.56	2.77,2.75,2.75	2.40,2.40,2.41		3.19,3.19,3.16	5.32,5.24,5.34
@multivac
outer-- & inner--	.32, .34, .33		.40, .42, .40		.60, .59, .63	1.14,1,15,1.14	1.56,1.56,1.53	2.66,2.64,2.70	2.58,2.55,2.61		3.30,3.33,3.34	5.34,5.21,5.21




TESTING LOW_LEVEL OPERATIONS 10 loops of 100k
integer comparison
@home
reading from array
@home
writing to array
@home

 	